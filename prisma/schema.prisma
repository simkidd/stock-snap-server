// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id                String            @id @default(cuid())
  guid              String            @default(uuid())
  sku               String
  name              String
  slug              String
  size              String?
  color             String?
  expiryDate        DateTime?
  unit              String? // Pack, Rows, Cartons, crates etc
  tags              String[]
  description       String
  price             Decimal
  quantity          Int
  quantitySold      Int?
  minimumQuantity   Int
  productCategoryId String
  productCategory   ProductCategory   @relation(fields: [productCategoryId], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  addedById         String
  updatedById       String?
  addedBy           User              @relation("addedBy", fields: [addedById], references: [id])
  updatedBy         User?             @relation("updatedBy", fields: [updatedById], references: [id])
  status            ProductStatusEnum @default(AVAILABLE)
  images            ProductImage[]
  sales             Sales[]
  Supplier          Supplier?         @relation(fields: [supplierId], references: [id])
  supplierId        String?
  orderProducts     OrderProduct[]
  brand             Brand?            @relation(fields: [brandId], references: [id])
  brandId           String?
  productGroup      ProductGroup?     @relation(fields: [productGroupId], references: [id])
  productGroupId    String?

  @@map("products")
}

model Brand {
  id        String    @id @default(cuid())
  name      String
  imageUrl  String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("brands")
}

model ProductCategory {
  id         String    @id @default(cuid())
  guid       String    @default(uuid())
  name       String
  slug       String
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  products   Product[]

  @@map("product_categories")
}

model ProductGroup {
  id         String                 @id @default(cuid())
  name       String
  slug       String
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  products   Product[]
  categories ProductGroupCategory[]

  @@map("product_groups")
}

model ProductGroupCategory {
  id             String       @id @default(cuid())
  productGroup   ProductGroup @relation(fields: [productGroupId], references: [id])
  productGroupId String
  category       Category     @relation(fields: [categoryId], references: [id])
  categoryId     String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("product_group_categories")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  publicId  String
  imageUrl  String
  isMain    Boolean  @default(false)
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_images")
}

model Sales {
  id            String    @id @default(cuid())
  unitPrice     Decimal
  totalAmount   Decimal
  quantity      Int
  cashierId     String
  cashier       User      @relation(fields: [cashierId], references: [id])
  productId     String
  invoiceNo     String
  note          String
  posNumber     String
  product       Product   @relation(fields: [productId], references: [id])
  paymentMethod String    @default("Cash")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  discount      Discount? @relation(fields: [discountId], references: [id])
  discountId    String?

  @@map("sales")
}

model User {
  id              String    @id @default(cuid())
  guid            String    @default(uuid())
  name            String
  gender          String
  avatar          String?
  email           String    @unique
  isEmailVerified Boolean   @default(false)
  password        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  addedProducts   Product[] @relation("addedBy")
  updatedProducts Product[] @relation("updatedBy")
  sales           Sales[]
  role            UserRole  @default(STAFF)
  phoneNumber     String?
  address         String?

  @@map("users")
}

model Category {
  id                   String                 @id @default(cuid())
  name                 String
  slug                 String
  productCategories    ProductCategory[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  ProductGroupCategory ProductGroupCategory[]

  @@map("categories")
}

model Discount {
  id          String   @id @default(cuid())
  code        String   @unique
  description String?
  percentage  Float    @default(0.0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sales       Sales[]

  @@map("discounts")
}

model Supplier {
  id          String    @id @default(cuid())
  name        String
  contactInfo String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
  orders      Order[]

  @@map("suppliers")
}

model Order {
  id            String          @id @default(cuid())
  orderNumber   String          @unique
  orderDate     DateTime        @default(now())
  totalAmount   Decimal
  status        OrderStatusEnum
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  supplierId    String
  supplier      Supplier        @relation(fields: [supplierId], references: [id])
  orderProducts OrderProduct[]

  @@map("orders")
}

model OrderProduct {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_products")
}

enum ProductStatusEnum {
  AVAILABLE
  OUT
  REORDER
  LOW
}

enum OrderStatusEnum {
  PENDING
  COMPLETED
  CANCELLED
}

enum UserRole {
  ADMIN
  MANAGER
  SALES_REP
  INVENTORY_CONTROLLER
  SUPPORT
  ACCOUNTANT
  SUPPLIER_MANAGER
  STAFF
}
